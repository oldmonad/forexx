// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: proto/exchange.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "exchangerate";

export interface ExchangeRateRequest {
  baseCode: string;
}

export interface ExchangeRateResponse {
  result: string;
  documentation: string;
  termsOfUse: string;
  timeLastUpdateUnix: number;
  timeLastUpdateUtc: string;
  timeNextUpdateUnix: number;
  timeNextUpdateUtc: string;
  baseCode: string;
  conversionRates: { [key: string]: number };
}

export interface ExchangeRateResponse_ConversionRatesEntry {
  key: string;
  value: number;
}

export const EXCHANGERATE_PACKAGE_NAME = "exchangerate";

export interface ExchangeRateServiceClient {
  getExchangeRates(request: ExchangeRateRequest, metadata?: Metadata): Observable<ExchangeRateResponse>;
}

export interface ExchangeRateServiceController {
  getExchangeRates(
    request: ExchangeRateRequest,
    metadata?: Metadata,
  ): Promise<ExchangeRateResponse> | Observable<ExchangeRateResponse> | ExchangeRateResponse;
}

export function ExchangeRateServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getExchangeRates"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ExchangeRateService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ExchangeRateService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EXCHANGE_RATE_SERVICE_NAME = "ExchangeRateService";
