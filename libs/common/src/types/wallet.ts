// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: proto/wallet.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "wallet";

/** Enum for allowed currencies. */
export enum GRPCCurrency {
  CURRENCY_UNSPECIFIED = 0,
  NGN = 1,
  USD = 2,
  UNRECOGNIZED = -1,
}

export enum UpdateType {
  UPDATE_TYPE_UNSPECIFIED = 0,
  DEPOSIT = 1,
  WITHDRAWAL = 2,
  UNRECOGNIZED = -1,
}

/** Message representing a Wallet. */
export interface Wallet {
  id: string;
  userId: string;
  balance: number;
  /**
   * google.protobuf.Timestamp createdAt = 5;
   * google.protobuf.Timestamp updatedAt = 6;
   */
  currency: GRPCCurrency;
}

/** Request message for fetching a wallet. */
export interface GetWalletRequest {
  userId: string;
}

/** Request message for fetching a wallet. */
export interface GetWalletRequestByCurrency {
  userId: string;
  currency: GRPCCurrency;
}

/** Request message for updating a wallet. */
export interface UpdateWalletRequest {
  walletId: string;
  userId: string;
  updateType: UpdateType;
  amount: number;
}

export const WALLET_PACKAGE_NAME = "wallet";

/** Service definition for Wallet operations. */

export interface WalletServiceClient {
  getWallet(request: GetWalletRequest, metadata?: Metadata): Observable<Wallet>;

  getWalletByCurrency(request: GetWalletRequestByCurrency, metadata?: Metadata): Observable<Wallet>;

  updateWallet(request: UpdateWalletRequest, metadata?: Metadata): Observable<Wallet>;
}

/** Service definition for Wallet operations. */

export interface WalletServiceController {
  getWallet(request: GetWalletRequest, metadata?: Metadata): Promise<Wallet> | Observable<Wallet> | Wallet;

  getWalletByCurrency(
    request: GetWalletRequestByCurrency,
    metadata?: Metadata,
  ): Promise<Wallet> | Observable<Wallet> | Wallet;

  updateWallet(request: UpdateWalletRequest, metadata?: Metadata): Promise<Wallet> | Observable<Wallet> | Wallet;
}

export function WalletServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getWallet", "getWalletByCurrency", "updateWallet"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("WalletService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("WalletService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const WALLET_SERVICE_NAME = "WalletService";
